# coding: utf-8

"""
    DFIRTrack

    OpenAPI 3 - Documentation of DFIRTrack API  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dfirtrackapi_client.configuration import Configuration


class Case(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'case_id': 'int',
        'case_name': 'str',
        'case_is_incident': 'bool',
        'case_created_by_user_id': 'int',
        'case_create_time': 'datetime'
    }

    attribute_map = {
        'case_id': 'case_id',
        'case_name': 'case_name',
        'case_is_incident': 'case_is_incident',
        'case_created_by_user_id': 'case_created_by_user_id',
        'case_create_time': 'case_create_time'
    }

    def __init__(self, case_id=None, case_name=None, case_is_incident=None, case_created_by_user_id=None, case_create_time=None, local_vars_configuration=None):  # noqa: E501
        """Case - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._case_id = None
        self._case_name = None
        self._case_is_incident = None
        self._case_created_by_user_id = None
        self._case_create_time = None
        self.discriminator = None

        if case_id is not None:
            self.case_id = case_id
        self.case_name = case_name
        self.case_is_incident = case_is_incident
        self.case_created_by_user_id = case_created_by_user_id
        if case_create_time is not None:
            self.case_create_time = case_create_time

    @property
    def case_id(self):
        """Gets the case_id of this Case.  # noqa: E501


        :return: The case_id of this Case.  # noqa: E501
        :rtype: int
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Case.


        :param case_id: The case_id of this Case.  # noqa: E501
        :type: int
        """

        self._case_id = case_id

    @property
    def case_name(self):
        """Gets the case_name of this Case.  # noqa: E501


        :return: The case_name of this Case.  # noqa: E501
        :rtype: str
        """
        return self._case_name

    @case_name.setter
    def case_name(self, case_name):
        """Sets the case_name of this Case.


        :param case_name: The case_name of this Case.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and case_name is None:  # noqa: E501
            raise ValueError("Invalid value for `case_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                case_name is not None and len(case_name) > 50):
            raise ValueError("Invalid value for `case_name`, length must be less than or equal to `50`")  # noqa: E501

        self._case_name = case_name

    @property
    def case_is_incident(self):
        """Gets the case_is_incident of this Case.  # noqa: E501


        :return: The case_is_incident of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._case_is_incident

    @case_is_incident.setter
    def case_is_incident(self, case_is_incident):
        """Sets the case_is_incident of this Case.


        :param case_is_incident: The case_is_incident of this Case.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and case_is_incident is None:  # noqa: E501
            raise ValueError("Invalid value for `case_is_incident`, must not be `None`")  # noqa: E501

        self._case_is_incident = case_is_incident

    @property
    def case_created_by_user_id(self):
        """Gets the case_created_by_user_id of this Case.  # noqa: E501


        :return: The case_created_by_user_id of this Case.  # noqa: E501
        :rtype: int
        """
        return self._case_created_by_user_id

    @case_created_by_user_id.setter
    def case_created_by_user_id(self, case_created_by_user_id):
        """Sets the case_created_by_user_id of this Case.


        :param case_created_by_user_id: The case_created_by_user_id of this Case.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and case_created_by_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `case_created_by_user_id`, must not be `None`")  # noqa: E501

        self._case_created_by_user_id = case_created_by_user_id

    @property
    def case_create_time(self):
        """Gets the case_create_time of this Case.  # noqa: E501


        :return: The case_create_time of this Case.  # noqa: E501
        :rtype: datetime
        """
        return self._case_create_time

    @case_create_time.setter
    def case_create_time(self, case_create_time):
        """Sets the case_create_time of this Case.


        :param case_create_time: The case_create_time of this Case.  # noqa: E501
        :type: datetime
        """

        self._case_create_time = case_create_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Case):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Case):
            return True

        return self.to_dict() != other.to_dict()
