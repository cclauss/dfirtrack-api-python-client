# coding: utf-8

"""
    DFIRTrack

    OpenAPI 3 - Documentation of DFIRTrack API  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dfirtrackapi_client.configuration import Configuration


class Task(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_id': 'int',
        'parent_task': 'int',
        'taskname': 'int',
        'taskpriority': 'int',
        'taskstatus': 'int',
        'system': 'int',
        'task_assigned_to_user_id': 'int',
        'tag': 'list[int]',
        'task_scheduled_time': 'datetime',
        'task_started_time': 'datetime',
        'task_finished_time': 'datetime',
        'task_due_time': 'datetime',
        'task_create_time': 'datetime',
        'task_modify_time': 'datetime',
        'task_created_by_user_id': 'int',
        'task_modified_by_user_id': 'int'
    }

    attribute_map = {
        'task_id': 'task_id',
        'parent_task': 'parent_task',
        'taskname': 'taskname',
        'taskpriority': 'taskpriority',
        'taskstatus': 'taskstatus',
        'system': 'system',
        'task_assigned_to_user_id': 'task_assigned_to_user_id',
        'tag': 'tag',
        'task_scheduled_time': 'task_scheduled_time',
        'task_started_time': 'task_started_time',
        'task_finished_time': 'task_finished_time',
        'task_due_time': 'task_due_time',
        'task_create_time': 'task_create_time',
        'task_modify_time': 'task_modify_time',
        'task_created_by_user_id': 'task_created_by_user_id',
        'task_modified_by_user_id': 'task_modified_by_user_id'
    }

    def __init__(self, task_id=None, parent_task=None, taskname=None, taskpriority=None, taskstatus=None, system=None, task_assigned_to_user_id=None, tag=None, task_scheduled_time=None, task_started_time=None, task_finished_time=None, task_due_time=None, task_create_time=None, task_modify_time=None, task_created_by_user_id=None, task_modified_by_user_id=None, local_vars_configuration=None):  # noqa: E501
        """Task - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_id = None
        self._parent_task = None
        self._taskname = None
        self._taskpriority = None
        self._taskstatus = None
        self._system = None
        self._task_assigned_to_user_id = None
        self._tag = None
        self._task_scheduled_time = None
        self._task_started_time = None
        self._task_finished_time = None
        self._task_due_time = None
        self._task_create_time = None
        self._task_modify_time = None
        self._task_created_by_user_id = None
        self._task_modified_by_user_id = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        self.parent_task = parent_task
        self.taskname = taskname
        self.taskpriority = taskpriority
        self.taskstatus = taskstatus
        self.system = system
        self.task_assigned_to_user_id = task_assigned_to_user_id
        if tag is not None:
            self.tag = tag
        self.task_scheduled_time = task_scheduled_time
        self.task_started_time = task_started_time
        self.task_finished_time = task_finished_time
        self.task_due_time = task_due_time
        if task_create_time is not None:
            self.task_create_time = task_create_time
        if task_modify_time is not None:
            self.task_modify_time = task_modify_time
        self.task_created_by_user_id = task_created_by_user_id
        self.task_modified_by_user_id = task_modified_by_user_id

    @property
    def task_id(self):
        """Gets the task_id of this Task.  # noqa: E501


        :return: The task_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Task.


        :param task_id: The task_id of this Task.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def parent_task(self):
        """Gets the parent_task of this Task.  # noqa: E501


        :return: The parent_task of this Task.  # noqa: E501
        :rtype: int
        """
        return self._parent_task

    @parent_task.setter
    def parent_task(self, parent_task):
        """Sets the parent_task of this Task.


        :param parent_task: The parent_task of this Task.  # noqa: E501
        :type: int
        """

        self._parent_task = parent_task

    @property
    def taskname(self):
        """Gets the taskname of this Task.  # noqa: E501


        :return: The taskname of this Task.  # noqa: E501
        :rtype: int
        """
        return self._taskname

    @taskname.setter
    def taskname(self, taskname):
        """Sets the taskname of this Task.


        :param taskname: The taskname of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and taskname is None:  # noqa: E501
            raise ValueError("Invalid value for `taskname`, must not be `None`")  # noqa: E501

        self._taskname = taskname

    @property
    def taskpriority(self):
        """Gets the taskpriority of this Task.  # noqa: E501


        :return: The taskpriority of this Task.  # noqa: E501
        :rtype: int
        """
        return self._taskpriority

    @taskpriority.setter
    def taskpriority(self, taskpriority):
        """Sets the taskpriority of this Task.


        :param taskpriority: The taskpriority of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and taskpriority is None:  # noqa: E501
            raise ValueError("Invalid value for `taskpriority`, must not be `None`")  # noqa: E501

        self._taskpriority = taskpriority

    @property
    def taskstatus(self):
        """Gets the taskstatus of this Task.  # noqa: E501


        :return: The taskstatus of this Task.  # noqa: E501
        :rtype: int
        """
        return self._taskstatus

    @taskstatus.setter
    def taskstatus(self, taskstatus):
        """Sets the taskstatus of this Task.


        :param taskstatus: The taskstatus of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and taskstatus is None:  # noqa: E501
            raise ValueError("Invalid value for `taskstatus`, must not be `None`")  # noqa: E501

        self._taskstatus = taskstatus

    @property
    def system(self):
        """Gets the system of this Task.  # noqa: E501


        :return: The system of this Task.  # noqa: E501
        :rtype: int
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Task.


        :param system: The system of this Task.  # noqa: E501
        :type: int
        """

        self._system = system

    @property
    def task_assigned_to_user_id(self):
        """Gets the task_assigned_to_user_id of this Task.  # noqa: E501


        :return: The task_assigned_to_user_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._task_assigned_to_user_id

    @task_assigned_to_user_id.setter
    def task_assigned_to_user_id(self, task_assigned_to_user_id):
        """Sets the task_assigned_to_user_id of this Task.


        :param task_assigned_to_user_id: The task_assigned_to_user_id of this Task.  # noqa: E501
        :type: int
        """

        self._task_assigned_to_user_id = task_assigned_to_user_id

    @property
    def tag(self):
        """Gets the tag of this Task.  # noqa: E501


        :return: The tag of this Task.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Task.


        :param tag: The tag of this Task.  # noqa: E501
        :type: list[int]
        """

        self._tag = tag

    @property
    def task_scheduled_time(self):
        """Gets the task_scheduled_time of this Task.  # noqa: E501


        :return: The task_scheduled_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_scheduled_time

    @task_scheduled_time.setter
    def task_scheduled_time(self, task_scheduled_time):
        """Sets the task_scheduled_time of this Task.


        :param task_scheduled_time: The task_scheduled_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_scheduled_time = task_scheduled_time

    @property
    def task_started_time(self):
        """Gets the task_started_time of this Task.  # noqa: E501


        :return: The task_started_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_started_time

    @task_started_time.setter
    def task_started_time(self, task_started_time):
        """Sets the task_started_time of this Task.


        :param task_started_time: The task_started_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_started_time = task_started_time

    @property
    def task_finished_time(self):
        """Gets the task_finished_time of this Task.  # noqa: E501


        :return: The task_finished_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_finished_time

    @task_finished_time.setter
    def task_finished_time(self, task_finished_time):
        """Sets the task_finished_time of this Task.


        :param task_finished_time: The task_finished_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_finished_time = task_finished_time

    @property
    def task_due_time(self):
        """Gets the task_due_time of this Task.  # noqa: E501


        :return: The task_due_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_due_time

    @task_due_time.setter
    def task_due_time(self, task_due_time):
        """Sets the task_due_time of this Task.


        :param task_due_time: The task_due_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_due_time = task_due_time

    @property
    def task_create_time(self):
        """Gets the task_create_time of this Task.  # noqa: E501


        :return: The task_create_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_create_time

    @task_create_time.setter
    def task_create_time(self, task_create_time):
        """Sets the task_create_time of this Task.


        :param task_create_time: The task_create_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_create_time = task_create_time

    @property
    def task_modify_time(self):
        """Gets the task_modify_time of this Task.  # noqa: E501


        :return: The task_modify_time of this Task.  # noqa: E501
        :rtype: datetime
        """
        return self._task_modify_time

    @task_modify_time.setter
    def task_modify_time(self, task_modify_time):
        """Sets the task_modify_time of this Task.


        :param task_modify_time: The task_modify_time of this Task.  # noqa: E501
        :type: datetime
        """

        self._task_modify_time = task_modify_time

    @property
    def task_created_by_user_id(self):
        """Gets the task_created_by_user_id of this Task.  # noqa: E501


        :return: The task_created_by_user_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._task_created_by_user_id

    @task_created_by_user_id.setter
    def task_created_by_user_id(self, task_created_by_user_id):
        """Sets the task_created_by_user_id of this Task.


        :param task_created_by_user_id: The task_created_by_user_id of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and task_created_by_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_created_by_user_id`, must not be `None`")  # noqa: E501

        self._task_created_by_user_id = task_created_by_user_id

    @property
    def task_modified_by_user_id(self):
        """Gets the task_modified_by_user_id of this Task.  # noqa: E501


        :return: The task_modified_by_user_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._task_modified_by_user_id

    @task_modified_by_user_id.setter
    def task_modified_by_user_id(self, task_modified_by_user_id):
        """Sets the task_modified_by_user_id of this Task.


        :param task_modified_by_user_id: The task_modified_by_user_id of this Task.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and task_modified_by_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `task_modified_by_user_id`, must not be `None`")  # noqa: E501

        self._task_modified_by_user_id = task_modified_by_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Task):
            return True

        return self.to_dict() != other.to_dict()
