# coding: utf-8

"""
    DFIRTrack

    OpenAPI 3 - Documentation of DFIRTrack API  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dfirtrackapi_client.configuration import Configuration


class Artifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_id': 'int',
        'artifact_uuid': 'str',
        'artifact_name': 'str',
        'artifactstatus': 'int',
        'artifacttype': 'int',
        'case': 'int',
        'system': 'int',
        'artifact_md5': 'str',
        'artifact_sha1': 'str',
        'artifact_sha256': 'str',
        'artifact_source_path': 'str',
        'artifact_storage_path': 'str',
        'artifact_acquisition_time': 'datetime',
        'artifact_requested_time': 'datetime',
        'artifact_create_time': 'datetime',
        'artifact_created_by_user_id': 'int',
        'artifact_modify_time': 'datetime',
        'artifact_modified_by_user_id': 'int'
    }

    attribute_map = {
        'artifact_id': 'artifact_id',
        'artifact_uuid': 'artifact_uuid',
        'artifact_name': 'artifact_name',
        'artifactstatus': 'artifactstatus',
        'artifacttype': 'artifacttype',
        'case': 'case',
        'system': 'system',
        'artifact_md5': 'artifact_md5',
        'artifact_sha1': 'artifact_sha1',
        'artifact_sha256': 'artifact_sha256',
        'artifact_source_path': 'artifact_source_path',
        'artifact_storage_path': 'artifact_storage_path',
        'artifact_acquisition_time': 'artifact_acquisition_time',
        'artifact_requested_time': 'artifact_requested_time',
        'artifact_create_time': 'artifact_create_time',
        'artifact_created_by_user_id': 'artifact_created_by_user_id',
        'artifact_modify_time': 'artifact_modify_time',
        'artifact_modified_by_user_id': 'artifact_modified_by_user_id'
    }

    def __init__(self, artifact_id=None, artifact_uuid=None, artifact_name=None, artifactstatus=None, artifacttype=None, case=None, system=None, artifact_md5=None, artifact_sha1=None, artifact_sha256=None, artifact_source_path=None, artifact_storage_path=None, artifact_acquisition_time=None, artifact_requested_time=None, artifact_create_time=None, artifact_created_by_user_id=None, artifact_modify_time=None, artifact_modified_by_user_id=None, local_vars_configuration=None):  # noqa: E501
        """Artifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_id = None
        self._artifact_uuid = None
        self._artifact_name = None
        self._artifactstatus = None
        self._artifacttype = None
        self._case = None
        self._system = None
        self._artifact_md5 = None
        self._artifact_sha1 = None
        self._artifact_sha256 = None
        self._artifact_source_path = None
        self._artifact_storage_path = None
        self._artifact_acquisition_time = None
        self._artifact_requested_time = None
        self._artifact_create_time = None
        self._artifact_created_by_user_id = None
        self._artifact_modify_time = None
        self._artifact_modified_by_user_id = None
        self.discriminator = None

        if artifact_id is not None:
            self.artifact_id = artifact_id
        if artifact_uuid is not None:
            self.artifact_uuid = artifact_uuid
        self.artifact_name = artifact_name
        if artifactstatus is not None:
            self.artifactstatus = artifactstatus
        self.artifacttype = artifacttype
        self.case = case
        self.system = system
        self.artifact_md5 = artifact_md5
        self.artifact_sha1 = artifact_sha1
        self.artifact_sha256 = artifact_sha256
        self.artifact_source_path = artifact_source_path
        if artifact_storage_path is not None:
            self.artifact_storage_path = artifact_storage_path
        self.artifact_acquisition_time = artifact_acquisition_time
        self.artifact_requested_time = artifact_requested_time
        if artifact_create_time is not None:
            self.artifact_create_time = artifact_create_time
        self.artifact_created_by_user_id = artifact_created_by_user_id
        if artifact_modify_time is not None:
            self.artifact_modify_time = artifact_modify_time
        self.artifact_modified_by_user_id = artifact_modified_by_user_id

    @property
    def artifact_id(self):
        """Gets the artifact_id of this Artifact.  # noqa: E501


        :return: The artifact_id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this Artifact.


        :param artifact_id: The artifact_id of this Artifact.  # noqa: E501
        :type: int
        """

        self._artifact_id = artifact_id

    @property
    def artifact_uuid(self):
        """Gets the artifact_uuid of this Artifact.  # noqa: E501


        :return: The artifact_uuid of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_uuid

    @artifact_uuid.setter
    def artifact_uuid(self, artifact_uuid):
        """Sets the artifact_uuid of this Artifact.


        :param artifact_uuid: The artifact_uuid of this Artifact.  # noqa: E501
        :type: str
        """

        self._artifact_uuid = artifact_uuid

    @property
    def artifact_name(self):
        """Gets the artifact_name of this Artifact.  # noqa: E501


        :return: The artifact_name of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_name

    @artifact_name.setter
    def artifact_name(self, artifact_name):
        """Sets the artifact_name of this Artifact.


        :param artifact_name: The artifact_name of this Artifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and artifact_name is None:  # noqa: E501
            raise ValueError("Invalid value for `artifact_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                artifact_name is not None and len(artifact_name) > 4096):
            raise ValueError("Invalid value for `artifact_name`, length must be less than or equal to `4096`")  # noqa: E501

        self._artifact_name = artifact_name

    @property
    def artifactstatus(self):
        """Gets the artifactstatus of this Artifact.  # noqa: E501


        :return: The artifactstatus of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._artifactstatus

    @artifactstatus.setter
    def artifactstatus(self, artifactstatus):
        """Sets the artifactstatus of this Artifact.


        :param artifactstatus: The artifactstatus of this Artifact.  # noqa: E501
        :type: int
        """

        self._artifactstatus = artifactstatus

    @property
    def artifacttype(self):
        """Gets the artifacttype of this Artifact.  # noqa: E501


        :return: The artifacttype of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._artifacttype

    @artifacttype.setter
    def artifacttype(self, artifacttype):
        """Sets the artifacttype of this Artifact.


        :param artifacttype: The artifacttype of this Artifact.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and artifacttype is None:  # noqa: E501
            raise ValueError("Invalid value for `artifacttype`, must not be `None`")  # noqa: E501

        self._artifacttype = artifacttype

    @property
    def case(self):
        """Gets the case of this Artifact.  # noqa: E501


        :return: The case of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._case

    @case.setter
    def case(self, case):
        """Sets the case of this Artifact.


        :param case: The case of this Artifact.  # noqa: E501
        :type: int
        """

        self._case = case

    @property
    def system(self):
        """Gets the system of this Artifact.  # noqa: E501


        :return: The system of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Artifact.


        :param system: The system of this Artifact.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and system is None:  # noqa: E501
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501

        self._system = system

    @property
    def artifact_md5(self):
        """Gets the artifact_md5 of this Artifact.  # noqa: E501


        :return: The artifact_md5 of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_md5

    @artifact_md5.setter
    def artifact_md5(self, artifact_md5):
        """Sets the artifact_md5 of this Artifact.


        :param artifact_md5: The artifact_md5 of this Artifact.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                artifact_md5 is not None and len(artifact_md5) > 32):
            raise ValueError("Invalid value for `artifact_md5`, length must be less than or equal to `32`")  # noqa: E501

        self._artifact_md5 = artifact_md5

    @property
    def artifact_sha1(self):
        """Gets the artifact_sha1 of this Artifact.  # noqa: E501


        :return: The artifact_sha1 of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_sha1

    @artifact_sha1.setter
    def artifact_sha1(self, artifact_sha1):
        """Sets the artifact_sha1 of this Artifact.


        :param artifact_sha1: The artifact_sha1 of this Artifact.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                artifact_sha1 is not None and len(artifact_sha1) > 40):
            raise ValueError("Invalid value for `artifact_sha1`, length must be less than or equal to `40`")  # noqa: E501

        self._artifact_sha1 = artifact_sha1

    @property
    def artifact_sha256(self):
        """Gets the artifact_sha256 of this Artifact.  # noqa: E501


        :return: The artifact_sha256 of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_sha256

    @artifact_sha256.setter
    def artifact_sha256(self, artifact_sha256):
        """Sets the artifact_sha256 of this Artifact.


        :param artifact_sha256: The artifact_sha256 of this Artifact.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                artifact_sha256 is not None and len(artifact_sha256) > 64):
            raise ValueError("Invalid value for `artifact_sha256`, length must be less than or equal to `64`")  # noqa: E501

        self._artifact_sha256 = artifact_sha256

    @property
    def artifact_source_path(self):
        """Gets the artifact_source_path of this Artifact.  # noqa: E501


        :return: The artifact_source_path of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_source_path

    @artifact_source_path.setter
    def artifact_source_path(self, artifact_source_path):
        """Sets the artifact_source_path of this Artifact.


        :param artifact_source_path: The artifact_source_path of this Artifact.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                artifact_source_path is not None and len(artifact_source_path) > 4096):
            raise ValueError("Invalid value for `artifact_source_path`, length must be less than or equal to `4096`")  # noqa: E501

        self._artifact_source_path = artifact_source_path

    @property
    def artifact_storage_path(self):
        """Gets the artifact_storage_path of this Artifact.  # noqa: E501


        :return: The artifact_storage_path of this Artifact.  # noqa: E501
        :rtype: str
        """
        return self._artifact_storage_path

    @artifact_storage_path.setter
    def artifact_storage_path(self, artifact_storage_path):
        """Sets the artifact_storage_path of this Artifact.


        :param artifact_storage_path: The artifact_storage_path of this Artifact.  # noqa: E501
        :type: str
        """

        self._artifact_storage_path = artifact_storage_path

    @property
    def artifact_acquisition_time(self):
        """Gets the artifact_acquisition_time of this Artifact.  # noqa: E501


        :return: The artifact_acquisition_time of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._artifact_acquisition_time

    @artifact_acquisition_time.setter
    def artifact_acquisition_time(self, artifact_acquisition_time):
        """Sets the artifact_acquisition_time of this Artifact.


        :param artifact_acquisition_time: The artifact_acquisition_time of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._artifact_acquisition_time = artifact_acquisition_time

    @property
    def artifact_requested_time(self):
        """Gets the artifact_requested_time of this Artifact.  # noqa: E501


        :return: The artifact_requested_time of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._artifact_requested_time

    @artifact_requested_time.setter
    def artifact_requested_time(self, artifact_requested_time):
        """Sets the artifact_requested_time of this Artifact.


        :param artifact_requested_time: The artifact_requested_time of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._artifact_requested_time = artifact_requested_time

    @property
    def artifact_create_time(self):
        """Gets the artifact_create_time of this Artifact.  # noqa: E501


        :return: The artifact_create_time of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._artifact_create_time

    @artifact_create_time.setter
    def artifact_create_time(self, artifact_create_time):
        """Sets the artifact_create_time of this Artifact.


        :param artifact_create_time: The artifact_create_time of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._artifact_create_time = artifact_create_time

    @property
    def artifact_created_by_user_id(self):
        """Gets the artifact_created_by_user_id of this Artifact.  # noqa: E501


        :return: The artifact_created_by_user_id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_created_by_user_id

    @artifact_created_by_user_id.setter
    def artifact_created_by_user_id(self, artifact_created_by_user_id):
        """Sets the artifact_created_by_user_id of this Artifact.


        :param artifact_created_by_user_id: The artifact_created_by_user_id of this Artifact.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and artifact_created_by_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `artifact_created_by_user_id`, must not be `None`")  # noqa: E501

        self._artifact_created_by_user_id = artifact_created_by_user_id

    @property
    def artifact_modify_time(self):
        """Gets the artifact_modify_time of this Artifact.  # noqa: E501


        :return: The artifact_modify_time of this Artifact.  # noqa: E501
        :rtype: datetime
        """
        return self._artifact_modify_time

    @artifact_modify_time.setter
    def artifact_modify_time(self, artifact_modify_time):
        """Sets the artifact_modify_time of this Artifact.


        :param artifact_modify_time: The artifact_modify_time of this Artifact.  # noqa: E501
        :type: datetime
        """

        self._artifact_modify_time = artifact_modify_time

    @property
    def artifact_modified_by_user_id(self):
        """Gets the artifact_modified_by_user_id of this Artifact.  # noqa: E501


        :return: The artifact_modified_by_user_id of this Artifact.  # noqa: E501
        :rtype: int
        """
        return self._artifact_modified_by_user_id

    @artifact_modified_by_user_id.setter
    def artifact_modified_by_user_id(self, artifact_modified_by_user_id):
        """Sets the artifact_modified_by_user_id of this Artifact.


        :param artifact_modified_by_user_id: The artifact_modified_by_user_id of this Artifact.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and artifact_modified_by_user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `artifact_modified_by_user_id`, must not be `None`")  # noqa: E501

        self._artifact_modified_by_user_id = artifact_modified_by_user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Artifact):
            return True

        return self.to_dict() != other.to_dict()
