# coding: utf-8

"""
    DFIRTrack

    OpenAPI 3 - Documentation of DFIRTrack API  # noqa: E501

    The version of the OpenAPI document: 0.4.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dfirtrackapi_client.configuration import Configuration


class Systemuser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'systemuser_id': 'int',
        'systemuser_name': 'str',
        'system': 'int',
        'systemuser_lastlogon_time': 'datetime',
        'systemuser_is_systemadmin': 'bool'
    }

    attribute_map = {
        'systemuser_id': 'systemuser_id',
        'systemuser_name': 'systemuser_name',
        'system': 'system',
        'systemuser_lastlogon_time': 'systemuser_lastlogon_time',
        'systemuser_is_systemadmin': 'systemuser_is_systemadmin'
    }

    def __init__(self, systemuser_id=None, systemuser_name=None, system=None, systemuser_lastlogon_time=None, systemuser_is_systemadmin=None, local_vars_configuration=None):  # noqa: E501
        """Systemuser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._systemuser_id = None
        self._systemuser_name = None
        self._system = None
        self._systemuser_lastlogon_time = None
        self._systemuser_is_systemadmin = None
        self.discriminator = None

        if systemuser_id is not None:
            self.systemuser_id = systemuser_id
        self.systemuser_name = systemuser_name
        self.system = system
        self.systemuser_lastlogon_time = systemuser_lastlogon_time
        self.systemuser_is_systemadmin = systemuser_is_systemadmin

    @property
    def systemuser_id(self):
        """Gets the systemuser_id of this Systemuser.  # noqa: E501


        :return: The systemuser_id of this Systemuser.  # noqa: E501
        :rtype: int
        """
        return self._systemuser_id

    @systemuser_id.setter
    def systemuser_id(self, systemuser_id):
        """Sets the systemuser_id of this Systemuser.


        :param systemuser_id: The systemuser_id of this Systemuser.  # noqa: E501
        :type: int
        """

        self._systemuser_id = systemuser_id

    @property
    def systemuser_name(self):
        """Gets the systemuser_name of this Systemuser.  # noqa: E501


        :return: The systemuser_name of this Systemuser.  # noqa: E501
        :rtype: str
        """
        return self._systemuser_name

    @systemuser_name.setter
    def systemuser_name(self, systemuser_name):
        """Sets the systemuser_name of this Systemuser.


        :param systemuser_name: The systemuser_name of this Systemuser.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and systemuser_name is None:  # noqa: E501
            raise ValueError("Invalid value for `systemuser_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                systemuser_name is not None and len(systemuser_name) > 50):
            raise ValueError("Invalid value for `systemuser_name`, length must be less than or equal to `50`")  # noqa: E501

        self._systemuser_name = systemuser_name

    @property
    def system(self):
        """Gets the system of this Systemuser.  # noqa: E501


        :return: The system of this Systemuser.  # noqa: E501
        :rtype: int
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this Systemuser.


        :param system: The system of this Systemuser.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and system is None:  # noqa: E501
            raise ValueError("Invalid value for `system`, must not be `None`")  # noqa: E501

        self._system = system

    @property
    def systemuser_lastlogon_time(self):
        """Gets the systemuser_lastlogon_time of this Systemuser.  # noqa: E501


        :return: The systemuser_lastlogon_time of this Systemuser.  # noqa: E501
        :rtype: datetime
        """
        return self._systemuser_lastlogon_time

    @systemuser_lastlogon_time.setter
    def systemuser_lastlogon_time(self, systemuser_lastlogon_time):
        """Sets the systemuser_lastlogon_time of this Systemuser.


        :param systemuser_lastlogon_time: The systemuser_lastlogon_time of this Systemuser.  # noqa: E501
        :type: datetime
        """

        self._systemuser_lastlogon_time = systemuser_lastlogon_time

    @property
    def systemuser_is_systemadmin(self):
        """Gets the systemuser_is_systemadmin of this Systemuser.  # noqa: E501


        :return: The systemuser_is_systemadmin of this Systemuser.  # noqa: E501
        :rtype: bool
        """
        return self._systemuser_is_systemadmin

    @systemuser_is_systemadmin.setter
    def systemuser_is_systemadmin(self, systemuser_is_systemadmin):
        """Sets the systemuser_is_systemadmin of this Systemuser.


        :param systemuser_is_systemadmin: The systemuser_is_systemadmin of this Systemuser.  # noqa: E501
        :type: bool
        """

        self._systemuser_is_systemadmin = systemuser_is_systemadmin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Systemuser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Systemuser):
            return True

        return self.to_dict() != other.to_dict()
